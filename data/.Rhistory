stat_qq() +
stat_qq_line() +
theme_classic() +
labs(y = "Ethnicity") +
theme(legend.position = "right",
aspect.ratio = 1,
title = element_text(size = 28),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 28),
axis.text.y = element_text(size = 28),
axis.title.y = element_text(size = 28),
axis.title.x = element_text(size = 28),
legend.key = element_blank(), legend.key.size = unit(3,"line"),
legend.title=element_text(size=28))
qqplot.ethnicity
ggsave(paste(dir.images, "ethnicity_qqplot.pdf", sep = ""), qqplot.ethnicity, device = "pdf", width = 20, height = 20)
Oscore
Ascore
Cscore
Impulsive
SS
# Nscore
qqplot.nscore = ggplot(drugs.data, aes(sample = Nscore)) +
stat_qq() +
stat_qq_line() +
theme_classic() +
labs(y = "Nscore quantiles", x = "N quantiles") +
theme(legend.position = "right",
aspect.ratio = 1,
title = element_text(size = 28),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 28),
axis.text.y = element_text(size = 28),
axis.title.y = element_text(size = 28),
axis.title.x = element_text(size = 28),
legend.key = element_blank(), legend.key.size = unit(3,"line"),
legend.title=element_text(size=28))
qqplot.nscore
ggsave(paste(dir.images, "nscore_qqplot.pdf", sep = ""), qqplot.nscore, device = "pdf", width = 20, height = 20)
# Escore
qqplot.escore = ggplot(drugs.data, aes(sample = Escore)) +
stat_qq() +
stat_qq_line() +
theme_classic() +
labs(y = "Escore quantiles", x = "N quantiles") +
theme(legend.position = "right",
aspect.ratio = 1,
title = element_text(size = 28),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 28),
axis.text.y = element_text(size = 28),
axis.title.y = element_text(size = 28),
axis.title.x = element_text(size = 28),
legend.key = element_blank(), legend.key.size = unit(3,"line"),
legend.title=element_text(size=28))
qqplot.escore
ggsave(paste(dir.images, "escore_qqplot.pdf", sep = ""), qqplot.escore, device = "pdf", width = 20, height = 20)
# Oscore
qqplot.oscore = ggplot(drugs.data, aes(sample = Oscore)) +
stat_qq() +
stat_qq_line() +
theme_classic() +
labs(y = "Oscore quantiles", x = "N quantiles") +
theme(legend.position = "right",
aspect.ratio = 1,
title = element_text(size = 28),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 28),
axis.text.y = element_text(size = 28),
axis.title.y = element_text(size = 28),
axis.title.x = element_text(size = 28),
legend.key = element_blank(), legend.key.size = unit(3,"line"),
legend.title=element_text(size=28))
qqplot.oscore
ggsave(paste(dir.images, "oscore_qqplot.pdf", sep = ""), qqplot.oscore, device = "pdf", width = 20, height = 20)
# Ascore
qqplot.ascore = ggplot(drugs.data, aes(sample = Ascore)) +
stat_qq() +
stat_qq_line() +
theme_classic() +
labs(y = "Ascore quantiles", x = "N quantiles") +
theme(legend.position = "right",
aspect.ratio = 1,
title = element_text(size = 28),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 28),
axis.text.y = element_text(size = 28),
axis.title.y = element_text(size = 28),
axis.title.x = element_text(size = 28),
legend.key = element_blank(), legend.key.size = unit(3,"line"),
legend.title=element_text(size=28))
qqplot.ascore
ggsave(paste(dir.images, "ascore_qqplot.pdf", sep = ""), qqplot.ascore, device = "pdf", width = 20, height = 20)
# Cscore
qqplot.cscore = ggplot(drugs.data, aes(sample = Cscore)) +
stat_qq() +
stat_qq_line() +
theme_classic() +
labs(y = "Cscore quantiles", x = "N quantiles") +
theme(legend.position = "right",
aspect.ratio = 1,
title = element_text(size = 28),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 28),
axis.text.y = element_text(size = 28),
axis.title.y = element_text(size = 28),
axis.title.x = element_text(size = 28),
legend.key = element_blank(), legend.key.size = unit(3,"line"),
legend.title=element_text(size=28))
qqplot.cscore
ggsave(paste(dir.images, "cscore_qqplot.pdf", sep = ""), qqplot.cscore, device = "pdf", width = 20, height = 20)
# Impulsive
qqplot.impulsive = ggplot(drugs.data, aes(sample = Impulsive)) +
stat_qq() +
stat_qq_line() +
theme_classic() +
labs(y = "Impulsive") +
theme(legend.position = "right",
aspect.ratio = 1,
title = element_text(size = 28),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 28),
axis.text.y = element_text(size = 28),
axis.title.y = element_text(size = 28),
axis.title.x = element_text(size = 28),
legend.key = element_blank(), legend.key.size = unit(3,"line"),
legend.title=element_text(size=28))
qqplot.impulsive
ggsave(paste(dir.images, "impulsive_qqplot.pdf", sep = ""), qqplot.impulsive, device = "pdf", width = 20, height = 20)
hist.impulsive = ggplot(drugs.data, aes(x = Impulsive)) +
geom_histogram() +
theme_classic() +
labs(y = "Impulsive") +
theme(legend.position = "right",
aspect.ratio = 1,
title = element_text(size = 28),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 28),
axis.text.y = element_text(size = 28),
axis.title.y = element_text(size = 28),
axis.title.x = element_text(size = 28),
legend.key = element_blank(), legend.key.size = unit(3,"line"),
legend.title=element_text(size=28))
hist.impulsive
ggsave(paste(dir.images, "impulsive_hist.pdf", sep = ""), hist.impulsive, device = "pdf", width = 20, height = 20)
# SS
qqplot.ss = ggplot(drugs.data, aes(sample = SS)) +
stat_qq() +
stat_qq_line() +
theme_classic() +
labs(y = "SS") +
theme(legend.position = "right",
aspect.ratio = 1,
title = element_text(size = 28),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 28),
axis.text.y = element_text(size = 28),
axis.title.y = element_text(size = 28),
axis.title.x = element_text(size = 28),
legend.key = element_blank(), legend.key.size = unit(3,"line"),
legend.title=element_text(size=28))
qqplot.ss
ggsave(paste(dir.images, "ss_qqplot.pdf", sep = ""), qqplot.ss, device = "pdf", width = 20, height = 20)
hist.ss = ggplot(drugs.data, aes(x = SS)) +
geom_histogram() +
theme_classic() +
labs(y = "SS") +
theme(legend.position = "right",
aspect.ratio = 1,
title = element_text(size = 28),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 28),
axis.text.y = element_text(size = 28),
axis.title.y = element_text(size = 28),
axis.title.x = element_text(size = 28),
legend.key = element_blank(), legend.key.size = unit(3,"line"),
legend.title=element_text(size=28))
hist.ss
ggsave(paste(dir.images, "impulsive_ss.pdf", sep = ""), hist.ss, device = "pdf", width = 20, height = 20)
grid.cont.qqplots = grid.arrange(qqplot.ascore, qqplot.cscore, qqplot.cscore, qqplot.nscore,
qqplot.oscore, qqplot.ss, qqplot.impulsive, nrow = 2, ncol = 4)
ggsave(paste(dir.images, "cont_qqplots.pdf", sep = ""), grid.cont.qqplots, device = "pdf", width = 20, height = 20)
# Variable conversion ####
# Labels are taken from the metadata description at: https://archive.ics.uci.edu/ml/datasets/Drug+consumption+%28quantified%29
# We are not interested (for now) about how much time passed since the last
# use of a drug. Instead, we focus on whether it has been taken on not recently.
# Never used or used over a decade ago: never used
drugs.data[drugs.data == "CL0"] = FALSE
drugs.data[drugs.data == "CL1"] = FALSE
# Used in last decade to last day: used
drugs.data[drugs.data == "CL2"] = TRUE
drugs.data[drugs.data == "CL3"] = TRUE
drugs.data[drugs.data == "CL4"] = TRUE
drugs.data[drugs.data == "CL5"] = TRUE
drugs.data[drugs.data == "CL6"] = TRUE
# Creating has_taken_drugs column. It is equal to 0 if a user has never tried any drug, 1 otherwise.
drugs.data$has_taken_drugs = FALSE
# We assume that the following drugs are not illegal:
# Cannabis (USA, Canada, Australia do allow it, NZ is having a referendum about in September)
# Alcohol
# Chocolate
# Caffeine
# Nicotine
# Legalh
legal.drugs = c("Alcohol", "Caff", "Cannabis", "Choc", "Legalh", "Nicotine")
drugs.data$has_taken_illegal_drugs = FALSE
drugs.data$has_taken_synthetic_drugs = FALSE
for(i in seq(1:dim(drugs.data)[1]))
{
drugs.row = drugs.data[i, 14:32]
row.unique.values = unique(unlist(drugs.row))
if(TRUE %in% row.unique.values)
{
drugs.data[i]$has_taken_drugs = TRUE
}
purely.illegal.drugs.row = drugs.row[, -c("Alcohol", "Caff", "Choc", "Legalh", "Nicotine")]
row.illegal.unique.values = unique(unlist(purely.illegal.drugs.row))
if(TRUE %in% row.illegal.unique.values)
{
drugs.data[i]$has_taken_illegal_drugs = TRUE
}
synthetic.drugs.row = drugs.row[, c("Amphet", "Ecstasy", "LSD", "Ketamine")]
row.synthetic.unique.values = unique(unlist(synthetic.drugs.row))
if(TRUE %in% row.synthetic.unique.values)
{
drugs.data[i]$has_taken_synthetic_drugs = TRUE
}
}
# Converting categorical labels to a more readable format.
drugs.data$Age = as.factor(drugs.data$Age)
drugs.clean <- drugs.data %>%
mutate(Age = factor(Age, labels = c("18-24", "25-34", "35-44", "45-54", "55-64", "65+"))) %>%
mutate(Gender = factor(Gender, labels = c('Male', 'Female'))) %>%
mutate(Education = factor(Education, labels = c("< 16", "16", "17", "18", "College/University", "ProfessionalCert/Diploma", "BS", "MS", "PhD"))) %>%
mutate(Country = factor(Country, labels = c("USA", "New Zealand", "Other", "Australia", "Ireland","Canada","UK"))) %>%
mutate(Ethnicity = factor(Ethnicity, labels = c("Black", "Asian", "White", "White/Black", "Other", "White/Asian", "Black/Asian"))) %>%
mutate(has_taken_drugs = factor(has_taken_drugs, labels = c("No", "Yes"))) %>%
mutate(has_taken_illegal_drugs = factor(has_taken_illegal_drugs, labels = c("No", "Yes"))) %>%
mutate(has_taken_synthetic_drugs = factor(has_taken_synthetic_drugs, labels = c("No", "Yes"))) %>%
mutate_at(vars(Alcohol:has_taken_drugs), funs(as.factor)) %>%
select(-id)
save(drugs.clean, file = paste(dir, "\\drug_data_clean.RData", sep = ""))
rm(list = ls())
# Dataset available at: https://archive.ics.uci.edu/ml/datasets/adult
# Libraries
library(tibble)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggsci)
library(GGally)
library(gridExtra)
library(maps)
library(tidyr)
library(RColorBrewer)
library(pals)
library(glmnet)
library(pRoc)
library(caret)
# Global Variables ####
dir = "C:\\Users\\ettag\\Documents\\GitHub\\Stastistical-Learning-Project\\data"
setwd(dir = dir)
# Load ####
data.dir = paste(dir, "\\drug_data_clean.RData", sep = "")
load(data.dir)
images.dir = "C:\\Users\\ettag\\Documents\\GitHub\\Stastistical-Learning-Project\\images\\Predictions"
setwd(dir = images.dir)
# Divide dataset in train and test set ####
train.rows = round(dim(drugs.clean)[1] * 0.60)
test.rows = dim(drugs.clean)[1] - train.rows
set.seed(42)
train = sample(1:nrow(drugs.clean), train.rows)
train.ds = drugs.clean[train, ]
test.ds = drugs.clean[-train,]
# Build model with LASSO and 5 Fold CV
lambda_seq <- 10^seq(2, -2, by = -.1)
# glmnet wants a matrix, so we prepare data accordingly.
x = model.matrix(has_taken_illegal_drugs~., train.ds)
y = ifelse(train.ds$has_taken_illegal_drugs == "Yes",1,0)
cv_output <- cv.glmnet(x,y,
alpha = 1,
nfolds = 5, family = "binomial")
plot(cv_output)
# Looking for the best lambda.
best_lam = cv_output$lambda.min
lambda_1se = cv_output$lambda.1se
# Which coefficients we obtained?
coef(cv_output,s=lambda_1se)
# Test
x_test = model.matrix(has_taken_illegal_drugs ~.,test.ds)
lasso_prob = predict(cv_output, newx = x_test, s=lambda_1se, type= "response")
lasso_predict = rep("No",nrow(test.ds))
lasso_predict[lasso_prob>.5] <- "Yes"
# Confusion matrix
classification.table = table(pred = lasso_predict, true = test.ds$has_taken_illegal_drugs)
confusionMatrix(classification.table)
# Error rate
(10 / (147 + 10 + 220))
# Accuracy
mean(lasso_predict==test.ds$has_taken_illegal_drugs)
# Roc Curve
numeric_predict = ifelse(lasso_predict == "Yes",1,0)
numeric_real = ifelse(test.ds$has_taken_illegal_drugs == "Yes",1,0)
roc.out <- roc(numeric_predict, numeric_real, levels=c(0, 1))
plot.roc = plot(roc.out,
print.auc=TRUE,
main = "Illegal Drug Users Classification",
legacy.axes=TRUE,
xlab="False positive rate", ylab="True positive rate")
plot.roc
# Dataset available at: https://archive.ics.uci.edu/ml/datasets/adult
# Libraries
library(tibble)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggsci)
library(GGally)
library(gridExtra)
library(maps)
library(tidyr)
library(RColorBrewer)
library(pals)
library(glmnet)
library(pRoc)
library(caret)
# Global Variables ####
dir = "C:\\Users\\ettag\\Documents\\GitHub\\Stastistical-Learning-Project\\data"
setwd(dir = dir)
# Load ####
data.dir = paste(dir, "\\drug_data_clean.RData", sep = "")
load(data.dir)
images.dir = "C:\\Users\\ettag\\Documents\\GitHub\\Stastistical-Learning-Project\\images\\Predictions"
setwd(dir = images.dir)
# Divide dataset in train and test set ####
train.rows = round(dim(drugs.clean)[1] * 0.60)
test.rows = dim(drugs.clean)[1] - train.rows
set.seed(42)
train = sample(1:nrow(drugs.clean), train.rows)
train.ds = drugs.clean[train, ]
test.ds = drugs.clean[-train,]
# Build model with LASSO and 5 Fold CV
lambda_seq <- 10^seq(2, -2, by = -.1)
# glmnet wants a matrix, so we prepare data accordingly.
x = model.matrix(has_taken_synthetic_drugs~., train.ds)
y = ifelse(train.ds$has_taken_synthetic_drugs == "Yes",1,0)
cv_output <- cv.glmnet(x,y,
alpha = 1,
nfolds = 5, family = "binomial")
plot(cv_output)
# Looking for the best lambda.
best_lam = cv_output$lambda.min
lambda_1se = cv_output$lambda.1se
# Which coefficients we obtained?
coef(cv_output,s=lambda_1se)
# Test
x_test = model.matrix(has_taken_synthetic_drugs ~.,test.ds)
lasso_prob = predict(cv_output, newx = x_test, s=lambda_1se, type= "response")
lasso_predict = rep("No",nrow(test.ds))
lasso_predict[lasso_prob>.5] <- "Yes"
# Confusion matrix
classification.table = table(pred = lasso_predict, true = test.ds$has_taken_synthetic_drugs)
confusionMatrix(classification.table)
# Error rate
(10 / (147 + 10 + 220))
# Accuracy
mean(lasso_predict==test.ds$has_taken_synthetic_drugs)
# Roc Curve
numeric_predict = ifelse(lasso_predict == "Yes",1,0)
numeric_real = ifelse(test.ds$has_taken_synthetic_drugs == "Yes",1,0)
roc.out <- roc(numeric_predict, numeric_real, levels=c(0, 1))
plot.roc = plot(roc.out,
print.auc=TRUE,
main = "Illegal Drug Users Classification",
legacy.axes=TRUE,
xlab="False positive rate", ylab="True positive rate")
plot.roc
# Dataset available at: https://archive.ics.uci.edu/ml/datasets/adult
# Libraries
library(tibble)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggsci)
library(GGally)
library(gridExtra)
library(maps)
library(tidyr)
library(RColorBrewer)
library(pals)
library(glmnet)
library(pRoc)
library(caret)
# Global Variables ####
dir = "C:\\Users\\ettag\\Documents\\GitHub\\Stastistical-Learning-Project\\data"
setwd(dir = dir)
# Load ####
data.dir = paste(dir, "\\drug_data_clean.RData", sep = "")
load(data.dir)
images.dir = "C:\\Users\\ettag\\Documents\\GitHub\\Stastistical-Learning-Project\\images\\Predictions"
setwd(dir = images.dir)
# Divide dataset in train and test set ####
train.rows = round(dim(drugs.clean)[1] * 0.10)
test.rows = dim(drugs.clean)[1] - train.rows
set.seed(42)
train = sample(1:nrow(drugs.clean), train.rows)
train.ds = drugs.clean[train, ]
test.ds = drugs.clean[-train,]
# Build model with LASSO and 5 Fold CV
lambda_seq <- 10^seq(2, -2, by = -.1)
# glmnet wants a matrix, so we prepare data accordingly.
x = model.matrix(has_taken_synthetic_drugs~., train.ds)
y = ifelse(train.ds$has_taken_synthetic_drugs == "Yes",1,0)
cv_output <- cv.glmnet(x,y,
alpha = 1,
nfolds = 5, family = "binomial")
plot(cv_output)
# Looking for the best lambda.
best_lam = cv_output$lambda.min
lambda_1se = cv_output$lambda.1se
# Which coefficients we obtained?
coef(cv_output,s=lambda_1se)
# Test
x_test = model.matrix(has_taken_synthetic_drugs ~.,test.ds)
lasso_prob = predict(cv_output, newx = x_test, s=lambda_1se, type= "response")
lasso_predict = rep("No",nrow(test.ds))
lasso_predict[lasso_prob>.5] <- "Yes"
# Confusion matrix
classification.table = table(pred = lasso_predict, true = test.ds$has_taken_synthetic_drugs)
confusionMatrix(classification.table)
# Error rate
(10 / (147 + 10 + 220))
# Accuracy
mean(lasso_predict==test.ds$has_taken_synthetic_drugs)
# Roc Curve
numeric_predict = ifelse(lasso_predict == "Yes",1,0)
numeric_real = ifelse(test.ds$has_taken_synthetic_drugs == "Yes",1,0)
roc.out <- roc(numeric_predict, numeric_real, levels=c(0, 1))
plot.roc = plot(roc.out,
print.auc=TRUE,
main = "Illegal Drug Users Classification",
legacy.axes=TRUE,
xlab="False positive rate", ylab="True positive rate")
plot.roc
# Dataset available at: https://archive.ics.uci.edu/ml/datasets/adult
# Libraries
library(tibble)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggsci)
library(GGally)
library(gridExtra)
library(maps)
library(tidyr)
library(RColorBrewer)
library(pals)
library(glmnet)
library(pRoc)
library(caret)
# Global Variables ####
dir = "C:\\Users\\ettag\\Documents\\GitHub\\Stastistical-Learning-Project\\data"
setwd(dir = dir)
# Load ####
data.dir = paste(dir, "\\drug_data_clean.RData", sep = "")
load(data.dir)
images.dir = "C:\\Users\\ettag\\Documents\\GitHub\\Stastistical-Learning-Project\\images\\Predictions"
setwd(dir = images.dir)
# Divide dataset in train and test set ####
train.rows = round(dim(drugs.clean)[1] * 0.05)
test.rows = dim(drugs.clean)[1] - train.rows
set.seed(42)
train = sample(1:nrow(drugs.clean), train.rows)
train.ds = drugs.clean[train, ]
test.ds = drugs.clean[-train,]
# Build model with LASSO and 5 Fold CV
lambda_seq <- 10^seq(2, -2, by = -.1)
# glmnet wants a matrix, so we prepare data accordingly.
x = model.matrix(has_taken_synthetic_drugs~., train.ds)
y = ifelse(train.ds$has_taken_synthetic_drugs == "Yes",1,0)
cv_output <- cv.glmnet(x,y,
alpha = 1,
nfolds = 5, family = "binomial")
plot(cv_output)
# Looking for the best lambda.
best_lam = cv_output$lambda.min
lambda_1se = cv_output$lambda.1se
# Which coefficients we obtained?
coef(cv_output,s=lambda_1se)
# Test
x_test = model.matrix(has_taken_synthetic_drugs ~.,test.ds)
lasso_prob = predict(cv_output, newx = x_test, s=lambda_1se, type= "response")
lasso_predict = rep("No",nrow(test.ds))
lasso_predict[lasso_prob>.5] <- "Yes"
# Confusion matrix
classification.table = table(pred = lasso_predict, true = test.ds$has_taken_synthetic_drugs)
confusionMatrix(classification.table)
# Error rate
(10 / (147 + 10 + 220))
# Accuracy
mean(lasso_predict==test.ds$has_taken_synthetic_drugs)
# Roc Curve
numeric_predict = ifelse(lasso_predict == "Yes",1,0)
numeric_real = ifelse(test.ds$has_taken_synthetic_drugs == "Yes",1,0)
roc.out <- roc(numeric_predict, numeric_real, levels=c(0, 1))
plot.roc = plot(roc.out,
print.auc=TRUE,
main = "Illegal Drug Users Classification",
legacy.axes=TRUE,
xlab="False positive rate", ylab="True positive rate")
plot.roc
View(drugs.clean)
